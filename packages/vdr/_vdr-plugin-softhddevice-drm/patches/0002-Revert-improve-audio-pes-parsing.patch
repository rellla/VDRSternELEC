From aa6e68535a488e1b4220e36d13e6eb5ddcbdd337 Mon Sep 17 00:00:00 2001
From: Andreas Baierl <ichgeh@imkreisrum.de>
Date: Sat, 10 Dec 2022 18:27:20 +0100
Subject: [PATCH 2/3] Revert "improve audio pes parsing"

This reverts commit edbb683a9a7ca922f71ed6c5ea86cd3182b87e5e.
---
 audio.c     |   4 +-
 softhddev.c | 145 ++++++++++++++++++++++++++--------------------------
 2 files changed, 73 insertions(+), 76 deletions(-)

diff --git a/audio.c b/audio.c
index 3425480..76affdf 100644
--- a/audio.c
+++ b/audio.c
@@ -62,7 +62,6 @@
 #include "audio.h"
 #include "video.h"
 #include "codec.h"
-#include "softhddev.h"
 
 
 //----------------------------------------------------------------------------
@@ -761,8 +760,7 @@ static int AlsaPlayer(void)
 
 		n = RingBufferGetReadPointer(AudioRingBuffer, &p);
 		if (!n) {			// ring buffer empty
-			fprintf(stderr, "AlsaPlayer: ring buffer empty Videopkts: %d\n",
-				VideoGetPackets());
+			fprintf(stderr, "AlsaPlayer: ring buffer empty\n");
 		}
 		if (n < avail) {		// not enough bytes in ring buffer
 			avail = n;
diff --git a/softhddev.c b/softhddev.c
index d15df5f..f0bb9e7 100644
--- a/softhddev.c
+++ b/softhddev.c
@@ -106,16 +106,6 @@ static int AudioChannelID;		///< current audio channel id
 #define AUDIO_BUFFER_SIZE (512 * 1024)	///< audio PES buffer default size
 static AVPacket AudioAvPkt[1];		///< audio a/v packet
 
-void PrintStreamData(const uint8_t *data, int size)
-{
-	fprintf(stderr, "Data: %02x %02x %02x %02x %02x %02x %02x %02x %02x "
-		"%02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x "
-		"%02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x size %d\n",
-		data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7], data[8],
-		data[9], data[10], data[11], data[12], data[13], data[14], data[15], data[16], data[17],
-		data[18], data[19], data[20], data[21], data[22], data[23], data[24], data[25], data[26],
-		data[27], data[28], data[29], data[30], data[31], data[32], data[33], data[34], size);
-}
 
 //////////////////////////////////////////////////////////////////////////////
 //	Audio codec parser
@@ -176,7 +166,6 @@ static inline int FastMpegCheck(const uint8_t * p)
     return 1;
 }
 
-
 ///
 ///	Check for Mpeg audio.
 ///
@@ -263,15 +252,12 @@ static int MpegCheck(const uint8_t * data, int size)
     if (frame_size + 4 > size) {
 	return -frame_size - 4;
     }
-
-#ifdef DEBUG
-	if (!FastMpegCheck(data + frame_size)) {
-		fprintf(stderr, "\nMpegCheck: after this frame NO new mpeg frame starts\n");
-		PrintStreamData(data + frame_size, frame_size);
-	}
-#endif
-
+    // check if after this frame a new mpeg frame starts
+    if (FastMpegCheck(data + frame_size)) {
 	return frame_size;
+    }
+
+    return 0;
 }
 
 ///
@@ -509,25 +495,20 @@ static int AdtsCheck(const uint8_t * data, int size)
 */
 int PlayAudio(const uint8_t * data, int size, uint8_t id)
 {
-	int n;
-	const uint8_t *p;
-	AVRational timebase;
-	timebase.den = 90000;
-	timebase.num = 1;
+    int n;
+    const uint8_t *p;
 
 	AudioAvPkt->pts = AV_NOPTS_VALUE;
 
-	if (SkipAudio) {	// skip audio
-		fprintf(stderr, "PlayAudio: skip audio\n");
+//	fprintf(stderr, "[PlayAudio] size %d\n", size);
+
+    if (SkipAudio || !MyAudioDecoder) {	// skip audio
 		return size;
-	}
-	// hard limit buffer full: don't overrun audio buffers on replay
-	// stream freezed
-	if ((AudioFreeBytes() < AUDIO_MIN_BUFFER_FREE) || (StreamFreezed)){
-		fprintf(stderr, "PlayAudio: StreamFreezed\n");
+    }
+    if (StreamFreezed) {		// stream freezed
 		return 0;
-	}
-	if (NewAudioStream) {
+    }
+    if (NewAudioStream) {
 		// this clears the audio ringbuffer indirect, open and setup does it
 #ifdef DEBUG
 		fprintf(stderr, "PlayAudio: NewAudioStream\n");
@@ -538,54 +519,53 @@ int PlayAudio(const uint8_t * data, int size, uint8_t id)
 		AudioCodecID = AV_CODEC_ID_NONE;
 		AudioChannelID = -1;
 		NewAudioStream = 0;
-	}
-	// PES header 0x00 0x00 0x01 ID
-	// ID 0xBD 0xC0-0xCF
-	// must be a PES start code
-	if (size < 9 || !data || data[0] || data[1] || data[2] != 0x01) {
+    }
+    // hard limit buffer full: don't overrun audio buffers on replay
+    if (AudioFreeBytes() < AUDIO_MIN_BUFFER_FREE) {
+//		fprintf(stderr, "PlayAudio: AudioFreeBytes %d < AUDIO_MIN_BUFFER_FREE %d\n",
+//			AudioFreeBytes(), AUDIO_MIN_BUFFER_FREE);
+		return 0;
+    }
+    // PES header 0x00 0x00 0x01 ID
+    // ID 0xBD 0xC0-0xCF
+    // must be a PES start code
+    if (size < 9 || !data || data[0] || data[1] || data[2] != 0x01) {
 		Error(_("[softhddev] invalid PES audio packet\n"));
 		return size;
 	}
-	n = data[8];			// header size
+    n = data[8];			// header size
 
-	if (size < 9 + n + 4) {		// wrong size
+    if (size < 9 + n + 4) {		// wrong size
 		if (size == 9 + n) {
 			Warning(_("[softhddev] empty audio packet\n"));
-			fprintf(stderr, "PlayAudio: empty audio packet!\n");
 		} else {
 			Error(_("[softhddev] invalid audio packet %d bytes\n"), size);
-			fprintf(stderr, "PlayAudio: invalid audio packet %d bytes\n", size);
 		}
-		fprintf(stderr, "PlayAudio: wrong size\n");
 		return size;
-	}
+    }
 
-	if (data[7] & 0x80 && n >= 5) {
+    if (data[7] & 0x80 && n >= 5) {
 		AudioAvPkt->pts =
 			(int64_t) (data[9] & 0x0E) << 29 | data[10] << 22 | (data[11] &
 			0xFE) << 14 | data[12] << 7 | (data[13] & 0xFE) >> 1;
 		//Debug(3, "audio: pts %#012" PRIx64 "\n", AudioAvPkt->pts);
-	} else {
-		fprintf(stderr, "PlayAudio: No PTS!\n");
-	}
+    }
 
-	p = data + 9 + n;
-	n = size - 9 - n;			// skip pes header
-	if (n + AudioAvPkt->stream_index > AudioAvPkt->size) {
+    p = data + 9 + n;
+    n = size - 9 - n;			// skip pes header
+    if (n + AudioAvPkt->stream_index > AudioAvPkt->size) {
 		Fatal(_("[softhddev] audio buffer too small needed %d avail %d\n"),
 			n + AudioAvPkt->stream_index, AudioAvPkt->size);
-		fprintf(stderr, "PlayAudio: audio buffer too small needed %d avail %d\n",
-			n + AudioAvPkt->stream_index, AudioAvPkt->size);
 		AudioAvPkt->stream_index = 0;
-	}
+    }
 
-	if (AudioChannelID != id) {		// id changed audio track changed
+    if (AudioChannelID != id) {		// id changed audio track changed
 		AudioChannelID = id;
 		AudioCodecID = AV_CODEC_ID_NONE;
 		Debug(3, "audio/demux: new channel id\n");
-	}
-	// Private stream + LPCM ID
-	if ((id & 0xF0) == 0xA0) {
+    }
+    // Private stream + LPCM ID
+    if ((id & 0xF0) == 0xA0) {
 		if (n < 7) {
 			Error(_("[softhddev] invalid LPCM audio packet %d bytes\n"), size);
 			return size;
@@ -636,23 +616,23 @@ int PlayAudio(const uint8_t * data, int size, uint8_t id)
 	Audiofilter(AudioAvPkt->data, n - 7, NULL);		// Das muss in ein AVFrame gepackt werden!!!
 */
 	return size;
-	}
-	// DVD track header
-	if ((id & 0xF0) == 0x80 && (p[0] & 0xF0) == 0x80) {
+    }
+    // DVD track header
+    if ((id & 0xF0) == 0x80 && (p[0] & 0xF0) == 0x80) {
 		p += 4;
 		n -= 4;				// skip track header
 //		if (AudioCodecID == AV_CODEC_ID_NONE) {
 //			// FIXME: ConfigAudioBufferTime + x
 //			AudioSetBufferTime(400);
 //		}
-	}
-	// append new packet, to partial old data
-	memcpy(AudioAvPkt->data + AudioAvPkt->stream_index, p, n);
-	AudioAvPkt->stream_index += n;
+    }
+    // append new packet, to partial old data
+    memcpy(AudioAvPkt->data + AudioAvPkt->stream_index, p, n);
+    AudioAvPkt->stream_index += n;
 
-	n = AudioAvPkt->stream_index;
-	p = AudioAvPkt->data;
-	while (n >= 5) {
+    n = AudioAvPkt->stream_index;
+    p = AudioAvPkt->data;
+    while (n >= 5) {
 		int r;
 		unsigned codec_id;
 
@@ -696,6 +676,11 @@ int PlayAudio(const uint8_t * data, int size, uint8_t id)
 
 			// new codec id, close and open new
 			if (AudioCodecID != codec_id) {
+
+				AVRational timebase;
+				timebase.den = 90000;
+				timebase.num = 1;
+
 				CodecAudioClose(MyAudioDecoder);
 				CodecAudioOpen(MyAudioDecoder, codec_id, NULL, &timebase);
 				AudioCodecID = codec_id;
@@ -704,8 +689,11 @@ int PlayAudio(const uint8_t * data, int size, uint8_t id)
 			avpkt->data = (void *)p;
 			avpkt->size = r;
 			avpkt->pts = AudioAvPkt->pts;
+			avpkt->dts = AudioAvPkt->dts;
+			// FIXME: not aligned for ffmpeg
 			CodecAudioDecode(MyAudioDecoder, avpkt);
 			AudioAvPkt->pts = AV_NOPTS_VALUE;
+			AudioAvPkt->dts = AV_NOPTS_VALUE;
 			p += r;
 			n -= r;
 			continue;
@@ -714,13 +702,13 @@ int PlayAudio(const uint8_t * data, int size, uint8_t id)
 		--n;
 	}
 
-	// copy remaining bytes to start of packet
-	if (n) {
+    // copy remaining bytes to start of packet
+    if (n) {
 		memmove(AudioAvPkt->data, p, n);
-	}
-	AudioAvPkt->stream_index = n;
+    }
+    AudioAvPkt->stream_index = n;
 
-	return size;
+    return size;
 }
 
 /**
@@ -766,6 +754,17 @@ void ResetChannelId(void)
 
 //////////////////////////////////////////////////////////////////////////////
 
+void PrintStreamData(const uint8_t *data, int size)
+{
+	fprintf(stderr, "Data: %02x %02x %02x %02x %02x %02x %02x %02x %02x "
+		"%02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x "
+		"%02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x size %d\n",
+		data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7], data[8],
+		data[9], data[10], data[11], data[12], data[13], data[14], data[15], data[16], data[17],
+		data[18], data[19], data[20], data[21], data[22], data[23], data[24], data[25], data[26],
+		data[27], data[28], data[29], data[30], data[31], data[32], data[33], data[34], size);
+}
+
 // helper functions to parse resolution from stream
 const unsigned char * m_pStart;
 unsigned short m_nLength;
-- 
2.30.2

